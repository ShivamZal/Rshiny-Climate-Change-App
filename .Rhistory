server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- faithful[, 2:3]
ggplot(dist, aes(x=eruptions, y=waiting)) +
geom_point(colour="red",size=2)+
geom_density2d(aes(fill = ..level..),
alpha = 0.3,
size = 0.2,
n = input$n_breaks,
bw = input$bw_adjust*sd(eruptions)) +
scale_fill_gradient(low = "green", high = "red")
})
}
library(shiny)
library(datasets)
library(ggplot2)
ui<-fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
selectInput("n_breaks",
label = "Number of bins:",
choices = c(10, 20, 35, 50),
selected = 20),
sliderInput("bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2,
max = 2,
value = 1,
step = 0.2)
),
mainPanel(
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- faithful[, 2:3]
ggplot(dist, aes(x=eruptions, y=waiting)) +
geom_point(colour="red",size=2)+
geom_density2d(aes(fill = ..level..),
alpha = 0.3,
size = 0.2,
n = input$n_breaks,
bw = input$bw_adjust*sd(eruptions)) +
scale_fill_gradient(low = "green", high = "red")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(datasets)
library(ggplot2)
ui<-fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
selectInput("n_breaks",
label = "Number of bins:",
choices = c(10, 20, 35, 50),
selected = 20),
sliderInput("bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2,
max = 2,
value = 1,
step = 0.2)
),
mainPanel(
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- faithful[, 2:3]
ggplot(dist, aes(x=eruptions, y=waiting)) +
geom_point(colour="red",size=2)+
geom_density2d(aes(fill = ..level..),
alpha = 0.3,
size = 0.2,
n = input$n_breaks,
bw = input$bw_adjust*sd(eruptions)) +
scale_fill_gradient(low = "green", high = "red")
})
}
shinyApp(ui = ui, server = server)
runApp('app1.R')
get_data <- function() {
urlfile <- "https://raw.githubusercontent.com/andreash0/meteostat_monthly_measurements/master/meteostat_monthly.csv"
suppressWarnings({
read_csv(urlfile, col_types = c("station" = "c")) %>%
mutate(
time = as.Date(time),
station = as.character(station)
)
})
}
color_ramp_blue_red <- colorRamp(c("#1984c5", "#e2e2e2", "#c23728"), interpolate = "linear")
create_draw_arg_list <- function(new_data, curr_map_level) {
draw_arg_list <- list()
if (curr_map_level != 3) {
draw_arg_list$labels <- create_labels(new_data, curr_map_level)
draw_arg_list$fill_color <- ~ colorNumeric(color_ramp_blue_red, tavg)(tavg)
draw_arg_list$fill_opacity <- 1
draw_arg_list$highlight <- highlightOptions(weight = 6, color = "#666", fillOpacity = 0.7)
draw_arg_list$weight <- 2
} else {
draw_arg_list$labels <- NULL
draw_arg_list$fill_color <- "#EDDCDC"
draw_arg_list$fill_opacity <- 0.2
draw_arg_list$highlight <- NULL
draw_arg_list$weight <- 1
}
draw_arg_list
}
View(get_data)
library(leafdown)
library(leaflet)
library(shiny)
library(dplyr)
library(shinyjs)
library(leafgl)
library(sf)
library(ggplot2)
library(plotly)
library(bs4Dash)
library(fresh)
library(ggrepel)
library(readr)
install.packages("leafdown")
library(leafdown)
library(leaflet)
library(shiny)
library(dplyr)
library(shinyjs)
library(leafgl)
library(sf)
library(ggplot2)
library(plotly)
library(bs4Dash)
library(fresh)
library(ggrepel)
library(readr)
library(leafdown)
library(leaflet)
library(shiny)
library(dplyr)
library(shinyjs)
library(leafgl)
install.packages("leafgl")
library(leafgl)
library(sf)
library(ggplot2)
library(plotly)
library(bs4Dash)
install.packages("bs4Dash")
library(bs4Dash)
library(fresh)
library(ggrepel)
library(readr)
helper_files = list.files(path = "helper", full.names = TRUE, pattern = "*.R")
sapply(helper_files, source, encoding = "UTF-8")
usa1 <- readRDS("shapes/usa1.RDS")
usa2 <- readRDS("shapes/usa2.RDS")
spdfs_list <- list(usa1, usa2, usa2)
df_stations_monthly <- get_data()
server <- function(input, output) {
my_leafdown <- Leafdown$new(spdfs_list, "leafdown", input)
active_marker_ids <- NULL
markers <- NULL
rv_update_leafdown <- reactiveVal(0)
rv_active_markers <- reactiveVal()
observeEvent(input$drill_down, {
my_leafdown$drill_down()
rv_update_leafdown(rv_update_leafdown() + 1)
})
observeEvent(input$drill_up, {
my_leafdown$drill_up()
active_marker_ids <<- c()
isolate(rv_active_markers(c()))
rv_update_leafdown(rv_update_leafdown() + 1)
})
output$leafdown <- renderLeaflet({
rv_update_leafdown()
update_leafdown_map(my_leafdown, input, df_stations_monthly, my_leafdown$curr_data)
})
observeEvent(input$leafdown_glify_click, {
click_lat <- input$leafdown_glify_click$lat
click_lng <- input$leafdown_glify_click$lng
markers <- avg_temp_per_displ_marker(df_stations_monthly, my_leafdown$curr_data)
new_id <- which(markers$latitude == click_lat & markers$longitude == click_lng)
if (new_id %in% active_marker_ids) {
active_marker_ids <<- active_marker_ids[!active_marker_ids == new_id]
} else {
active_marker_ids <<- c(active_marker_ids, new_id)
}
rv_active_markers(markers[active_marker_ids, ])
update_markers(active_marker_ids, markers)
}, ignoreInit = TRUE)
# plots
output$line_plot <- renderPlot({
curr_sel_data <- my_leafdown$curr_sel_data()
curr_map_level <- my_leafdown$curr_map_level
active_markers <- rv_active_markers()
create_line_plot(curr_sel_data, curr_map_level, df_stations_monthly, active_markers)
})
output$scatter_plot <- renderPlot({
curr_sel_data <- my_leafdown$curr_sel_data()
curr_map_level <- my_leafdown$curr_map_level
active_markers <- rv_active_markers()
create_scatter_plot(curr_sel_data, curr_map_level, df_stations_monthly, active_markers)
})
}
dashboardPage(
title = "Basic Dashboard",
header = dashboardHeader(border = FALSE, status = "purple"),
sidebar = dashboardSidebar(disable = TRUE),
footer = dashboardFooter(),
body = dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style-app.css")
),
use_theme(create_theme(
bs4dash_color(
purple = "#454d55"
)
)),
fluidRow(
box(
tags$style(HTML(".leaflet-container {background: #343a40;}")),
useShinyjs(),
actionButton("drill_down", "Drill Down"),
actionButton("drill_up", "Drill Up"),
leafletOutput("leafdown", height = 700),
collapsible = FALSE,
width = 6,
headerBorder = FALSE
),
column(
width = 6,
fluidRow(
bs4Card(
plotOutput("scatter_plot", height = 328),
width = 12,
collapsible = FALSE,
headerBorder = FALSE
)
),
fluidRow(
box(
plotOutput("line_plot", height = 328),
width = 12,
collapsible = FALSE,
headerBorder = FALSE
)
),
dark = TRUE
)
dashboardPage(
title = "Basic Dashboard",
header = dashboardHeader(border = FALSE, status = "purple"),
sidebar = dashboardSidebar(disable = TRUE),
footer = dashboardFooter(),
body = dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style-app.css")
),
use_theme(create_theme(
bs4dash_color(
purple = "#454d55"
)
)),
fluidRow(
box(
tags$style(HTML(".leaflet-container {background: #343a40;}")),
useShinyjs(),
actionButton("drill_down", "Drill Down"),
actionButton("drill_up", "Drill Up"),
leafletOutput("leafdown", height = 700),
collapsible = FALSE,
width = 6,
headerBorder = FALSE
),
column(
width = 6,
fluidRow(
bs4Card(
plotOutput("scatter_plot", height = 328),
width = 12,
collapsible = FALSE,
headerBorder = FALSE
)
),
fluidRow(
box(
plotOutput("line_plot", height = 328),
width = 12,
collapsible = FALSE,
headerBorder = FALSE
)
),
dark = TRUE
)
ui <- dashboardPage(
title = "Basic Dashboard",
header = dashboardHeader(border = FALSE, status = "purple"),
sidebar = dashboardSidebar(disable = TRUE),
footer = dashboardFooter(),
body = dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style-app.css")
),
use_theme(create_theme(
bs4dash_color(
purple = "#454d55"
)
)),
fluidRow(
box(
tags$style(HTML(".leaflet-container {background: #343a40;}")),
useShinyjs(),
actionButton("drill_down", "Drill Down"),
actionButton("drill_up", "Drill Up"),
leafletOutput("leafdown", height = 700),
collapsible = FALSE,
width = 6,
headerBorder = FALSE
),
column(
width = 6,
fluidRow(
bs4Card(
plotOutput("scatter_plot", height = 328),
width = 12,
collapsible = FALSE,
headerBorder = FALSE
)
),
fluidRow(
box(
plotOutput("line_plot", height = 328),
width = 12,
collapsible = FALSE,
headerBorder = FALSE
)
),
dark = TRUE
)
shinyApp(ui = ui, server = server)
runApp('app2.R')
class(df_stations_monthly)
write.csv(df_stations_monthly,"data/df_stations_monthly.csv")
View(df_stations_monthly)
library(shiny); runApp('app3.R')
runApp('app3.R')
runApp('app2.R')
library(shinydashboard)
runApp('app2.R')
library(shiny); runApp('app2.R')
runApp('app2.R')
runApp('app1.R')
runApp('app2.R')
library(shiny); runApp('app2.R')
runApp('app2.R')
runApp()
